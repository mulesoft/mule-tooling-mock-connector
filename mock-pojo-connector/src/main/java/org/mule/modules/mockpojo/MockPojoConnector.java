/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.mockpojo;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.MetaDataKeyRetriever;
import org.mule.api.annotations.MetaDataRetriever;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.Query;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.MetaDataKeyParam;
import org.mule.api.annotations.param.MetaDataKeyParamAffectsType;
import org.mule.api.annotations.param.Optional;
import org.mule.common.metadata.DefaultMetaData;
import org.mule.common.metadata.DefaultMetaDataKey;
import org.mule.common.metadata.DefaultPojoMetaDataModel;
import org.mule.common.metadata.MetaData;
import org.mule.common.metadata.MetaDataKey;
import org.mule.common.query.DsqlQuery;
import org.mule.modules.mockpojo.EverythingPojo.TestEnum;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name = "mockpojo", description = "Mock Pojo Connector", friendlyName = "Mock Pojo Connector", schemaVersion = "1.0-SNAPSHOT")
public class MockPojoConnector
{

    private List<Object> queryResult;
    private String username;

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
            throws ConnectionException
    {
        this.username = username;

        if (queryResult == null)
        {
            queryResult = new ArrayList<Object>();

            EverythingPojo e = createTestObject();

            queryResult.add(e);
        }
    }

    private EverythingPojo createTestObject()
    {
        DatatypeFactory factory;
        try
        {
            factory = DatatypeFactory.newInstance();
        }
        catch (DatatypeConfigurationException e1)
        {
            throw new RuntimeException(e1);
        }

        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.DAY_OF_YEAR, 1);
        calendar.set(Calendar.YEAR, 2013);
        calendar.set(Calendar.HOUR, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);

        EverythingPojo e = new EverythingPojo();
        e.setBooleanObject(true);
        e.setByteObject(new Byte((byte) 1));
        e.setCalendar(calendar);
        e.setDate(calendar.getTime());
        e.setDoubleObject(1d);
        e.setLongObject(1l);
        e.setPrimitiveBoolean(true);
        e.setPrimitiveByte((byte) 1);
        e.setPrimitiveDouble(1d);
        e.setPrimitiveInt(1);
        e.setPrimitiveLong(1);
        e.setPrimitiveShort((short) 1);
        e.setTestEnum(TestEnum.BAR);
        e.setXmlGregorianCalendar(factory.newXMLGregorianCalendar((GregorianCalendar) calendar));
        return e;
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect()
    {
        queryResult = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected()
    {
        return queryResult != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId()
    {
        return username;
    }

    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-pojo-connector.xml.sample mockpojo:create}
     *
     * @param type The object type to create;
     * @param item A list of items to create.
     */
    @Processor
    public void create(@MetaDataKeyParam(affects = MetaDataKeyParamAffectsType.INPUT) String type, @Default("#[payload]") @Optional Object item)
    {
        this.queryResult.add(item);
    }

    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-pojo-connector.xml.sample mockpojo:query}
     *
     * @param query The query.
     * @return the query results.
     */
    @Processor
    public List<Object> query(@Query DsqlQuery query)
    {
        if (query.getTypes().get(0).getName().equals(EverythingPojo.class.getSimpleName()))
        {
            return queryResult;
        }

        return Collections.emptyList();
    }


    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-pojo-connector.xml.sample mockpojo:querySingle}
     *
     * @param query The query.
     * @return the query results.
     */
    @Processor
    public Object querySingle(@Query String query)
    {
        return queryResult.get(0);
    }


    /**
     * Get item.
     * <p/>
     * {@sample.xml ../../../doc/mock-pojo-connector.xml.sample mockpojo:get}
     *
     * @param type the object type to retrieve.
     * @param id   Object ID. If less than zero, it will return null.
     * @return an object.
     */
    @Processor
    public Object get(@MetaDataKeyParam(affects = MetaDataKeyParamAffectsType.OUTPUT) String type, int id)
    {
        if (id < 0)
        {
            return null;
        }
        return createTestObject();
    }

    @MetaDataKeyRetriever
    public List<MetaDataKey> getMetaDataKeys()
    {
        List<MetaDataKey> list = new ArrayList<MetaDataKey>();
        list.add(createEveythingPojoKey());
        return list;
    }

    public DefaultMetaDataKey createEveythingPojoKey()
    {
        return new DefaultMetaDataKey(EverythingPojo.class.getSimpleName(), EverythingPojo.class.getSimpleName());
    }

    @MetaDataRetriever
    public MetaData getMetaData(MetaDataKey key)
    {
        if (key.getId().equals(EverythingPojo.class.getSimpleName()))
        {
            return new DefaultMetaData(new DefaultPojoMetaDataModel(EverythingPojo.class));
        }
        throw new RuntimeException("Invalid key");
    }
}
