/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.mockxml;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.MetaDataKeyRetriever;
import org.mule.api.annotations.MetaDataRetriever;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.Query;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.MetaDataKeyParam;
import org.mule.api.annotations.param.MetaDataKeyParamAffectsType;
import org.mule.api.annotations.param.Optional;
import org.mule.common.metadata.DefaultMetaData;
import org.mule.common.metadata.DefaultMetaDataKey;
import org.mule.common.metadata.DefaultXmlMetaDataModel;
import org.mule.common.metadata.MetaData;
import org.mule.common.metadata.MetaDataKey;
import org.mule.common.query.DsqlQuery;
import org.mule.common.query.dsql.parser.MuleDsqlParser;

import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.apache.commons.io.IOUtils;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name = "mockxml", description = "Mock XML Connector", friendlyName = "Mock Xml Connector", schemaVersion = "1.0-SNAPSHOT")
public class MockXmlConnector
{

    public static final String ITEMS = "items";
    private List<String> queryResult;
    private String username;

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws org.mule.api.ConnectionException
     *
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
            throws ConnectionException
    {
        this.username = username;

        if (queryResult == null)
        {
            queryResult = new ArrayList<String>();
            queryResult.add(createItemsObject());
        }
    }

    private String createItemsObject()
    {
        URL resource = getClass().getClassLoader().getResource("items-10.xml");
        try
        {
            return IOUtils.toString(resource.openStream());
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }

    }


    private String createItemObject()
    {
        URL resource = getClass().getClassLoader().getResource("item.xml");
        try
        {
            return IOUtils.toString(resource.openStream());
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }

    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect()
    {
        queryResult = null;
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected()
    {
        return queryResult != null;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId()
    {
        return username;
    }

    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-xml-connector.xml.sample mockxml:create}
     *
     * @param type The object type to create;
     * @param item A list of items to create.
     */
    @Processor
    public void create(@MetaDataKeyParam(affects = MetaDataKeyParamAffectsType.INPUT) String type, @Default("#[payload]") @Optional String item)
    {
        this.queryResult.add(item);
    }

    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-xml-connector.xml.sample mockxml:query}
     *
     * @param query The query.
     * @return the query results.
     */
    @Processor
    public List<String> query(@Query DsqlQuery query)
    {
        if (query.getTypes().get(0).getName().equals("items"))
        {
            return Arrays.asList(createItemsObject());
        }
        else if (query.getTypes().get(0).getName().equals("item"))
        {
            return Arrays.asList(createItemObject());
        }

        return Collections.emptyList();
    }


    /**
     * Get items;
     * <p/>
     * {@sample.xml ../../../doc/mock-xml-connector.xml.sample mockxml:querySingle}
     *
     * @param query The query.
     * @return the query results.
     */
    @Processor
    public String querySingle(@Query String query)
    {
        return query(new MuleDsqlParser().parse(query)).get(0);
    }


    /**
     * Get item.
     * <p/>
     * {@sample.xml ../../../doc/mock-xml-connector.xml.sample mockxml:get}
     *
     * @param type the object type to retrieve.
     * @param id   Object ID. If less than zero, it will return null.
     * @return an object.
     */
    @Processor
    public String get(@MetaDataKeyParam(affects = MetaDataKeyParamAffectsType.OUTPUT) String type, int id)
    {
        if (id < 0)
        {
            return null;
        }
        return createItemsObject();
    }

    @MetaDataKeyRetriever
    public List<MetaDataKey> getMetaDataKeys()
    {
        List<MetaDataKey> list = new ArrayList<MetaDataKey>();
        list.add(createItemsKey());
        list.add(createItemKey());
        return list;
    }

    public DefaultMetaDataKey createItemsKey()
    {
        return new DefaultMetaDataKey("Items", ITEMS);
    }

    public DefaultMetaDataKey createItemKey()
    {
        return new DefaultMetaDataKey("Item", "item");
    }

    @MetaDataRetriever
    public MetaData getMetaData(MetaDataKey key)
    {

        try
        {
            final String schema = IOUtils.toString(getClass().getClassLoader().getResourceAsStream("items.xsd"));
            return new DefaultMetaData(new DefaultXmlMetaDataModel(Arrays.asList(schema), key.getId(), Charset.forName("UTF-8")));
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }

    }
}
